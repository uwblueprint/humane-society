import { QueryInterface } from "sequelize";
import { faker } from "@faker-js/faker";

export = {
  up: async (queryInterface: QueryInterface): Promise<void> => {
    await queryInterface.bulkInsert("users", [
      // Administrator users
      {
        first_name: "Mehul",
        last_name: "Sharma",
        auth_id: "tKRqSeQRQDbtb732noTEkIs5ES73",
        role: "Administrator",
        email: "mehulsharma@uwblueprint.org",
        color_level: 5,
        animal_tags: JSON.stringify(["Dog", "Cat"]),
        can_see_all_logs: true,
        can_assign_users_to_tasks: true,
        phone_number: faker.phone.number(),
        status: "Active",
        created_at: new Date(),
        updated_at: new Date(),
      },
      {
        first_name: "Gateen",
        last_name: "Chandak",
        auth_id: "IYHqIgVmCThBAHg2D3WZeLQoqAo1",
        role: "Administrator",
        email: "gateekchandak@uwblueprint.org",
        color_level: 5,
        animal_tags: JSON.stringify(["Dog", "Cat", "Bird"]),
        can_see_all_logs: true,
        can_assign_users_to_tasks: true,
        phone_number: faker.phone.number(),
        status: "Active",
        created_at: new Date(),
        updated_at: new Date(),
      },
      // Animal Behaviourist users
      {
        first_name: "Dr. Sarah",
        last_name: "Johnson",
        auth_id: faker.string.uuid(),
        role: "Animal Behaviourist",
        email: faker.internet.email(),
        color_level: 5,
        animal_tags: JSON.stringify(["Dog", "Cat", "Small Animal"]),
        can_see_all_logs: true,
        can_assign_users_to_tasks: false,
        phone_number: faker.phone.number(),
        status: "Active",
        created_at: new Date(),
        updated_at: new Date(),
      },
      {
        first_name: "Dr. Michael",
        last_name: "Roberts",
        auth_id: faker.string.uuid(),
        role: "Animal Behaviourist",
        email: faker.internet.email(),
        color_level: 4,
        animal_tags: JSON.stringify(["Bird", "Bunny"]),
        can_see_all_logs: true,
        can_assign_users_to_tasks: false,
        phone_number: faker.phone.number(),
        status: "Active",
        created_at: new Date(),
        updated_at: new Date(),
      },
      // Staff users
      {
        first_name: "Emma",
        last_name: "Wilson",
        auth_id: faker.string.uuid(),
        role: "Staff",
        email: faker.internet.email(),
        color_level: 4,
        animal_tags: JSON.stringify(["Dog", "Cat"]),
        can_see_all_logs: false,
        can_assign_users_to_tasks: true,
        phone_number: faker.phone.number(),
        status: "Active",
        created_at: new Date(),
        updated_at: new Date(),
      },
      {
        first_name: "James",
        last_name: "Anderson",
        auth_id: faker.string.uuid(),
        role: "Staff",
        email: faker.internet.email(),
        color_level: 3,
        animal_tags: JSON.stringify(["Bird", "Small Animal"]),
        can_see_all_logs: false,
        can_assign_users_to_tasks: true,
        phone_number: faker.phone.number(),
        status: "Active",
        created_at: new Date(),
        updated_at: new Date(),
      },
      // Volunteer users
      {
        first_name: "Lisa",
        last_name: "Thompson",
        auth_id: faker.string.uuid(),
        role: "Volunteer",
        email: faker.internet.email(),
        color_level: 2,
        animal_tags: JSON.stringify(["Dog"]),
        can_see_all_logs: false,
        can_assign_users_to_tasks: false,
        phone_number: faker.phone.number(),
        status: "Active",
        created_at: new Date(),
        updated_at: new Date(),
      },
      {
        first_name: "David",
        last_name: "Lu",
        auth_id: "NR6IuoDtciczCX3zpKMJceRWC2y2",
        role: "Volunteer",
        email: "davidlu@uwblueprint.org",
        color_level: 1,
        animal_tags: JSON.stringify(["Cat", "Bunny"]),
        can_see_all_logs: false,
        can_assign_users_to_tasks: false,
        phone_number: faker.phone.number(),
        status: "Active",
        created_at: new Date(),
        updated_at: new Date(),
      },
    ]);
  },

  down: async (queryInterface: QueryInterface): Promise<void> => {
    await queryInterface.bulkDelete("users", {}, {});
  },
};
